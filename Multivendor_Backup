from asyncore import write
from distutils.log import error
import json
import ipaddress
from select import select
from click import prompt
from netmiko import (
    ConnectHandler,
    NetmikoTimeoutException,
    NetmikoAuthenticationException,
)
import datetime


def sendCommand(device, commands):
    result = {}
    try:
        with ConnectHandler(**device) as ssh:
            ssh.enable()
            for command in commands:
                # print(command)
                output = ssh.send_command(command, expect_string=r"%|>|#")
                # print(output)
                result[command] = output
        return result
    except (NetmikoTimeoutException, NetmikoAuthenticationException) as error:
        print(error)


def getConfig(device, command):
    try:
        with ConnectHandler(**device) as ssh:
            current_time = datetime.datetime.today().strftime('%Y_%b_%d')
            fileNameString = 'Backup_' + \
                str(device['host']) + '_' + str(current_time) + '.txt'
            ssh.enable()
            output = ssh.send_command(command, expect_string=r"%|>|#")
            # w  >>> Opens a file for writing. Creates a new file if it does not exist or truncates the file if it exists.
            with open(str(fileNameString), 'w') as f:
                for line in output:
                    f.write(line)
        return True
    except (NetmikoTimeoutException, NetmikoAuthenticationException) as error:
        print(error)


def validate_ip_address(address):
    try:
        ipaddress.ip_address(address)
        return True
    except ValueError:
        print("IP address {} is not valid\nTry again!".format(address))
# Function to get TFTP server address


def getTFTP():
    try:
        while True:
            TFTP_SRV = input(str("Please enter tftp server ip: "))
            if validate_ip_address(TFTP_SRV) == True:
                return TFTP_SRV
    except ValueError:
        print("Error")


if __name__ == "__main__":
    current_time = datetime.datetime.today().strftime('%Y_%b_%d')
    hosts = json.load(open("hosts.json"))
    prompt_all = input(
    "Backup all devices from hosts.json? (y/n) ")
    # If user want to backup all device
    if prompt_all == "y":
        TFTP = "x.x.x.x"
        print("Please wait...")
        # Juniper
        for device in hosts:
            if device["device_type"] == "juniper_junos":
                CM_Set = ["cli", "start shell", "cd /config", "tftp",
                            "connect "+TFTP, "put rescue.conf.gz"]
                sendCommand(hosts, CM_Set)
            # Fortinet
            elif device["device_type"] == "fortinet":
                CM_Set = [
                    f"execute backup config tftp FortiBackup {TFTP}"]
                sendCommand(device, CM_Set)
            # Cisco
            elif device["device_type"] == "cisco.ios":
                (device, "show running-configuration")
                print("send Command for cisco will be add here")
            else:
                print("error on prompt all y")
    # If user want to select device
    elif prompt_all == "n":
            for device in hosts:
                prompt_which_vendor = input(
                    "\n\n1.Fortinet\n2.Juniper\n3.Cisco\n\nSelect vendor you want to backup: ")
                # Fortinet Devices
                if prompt_which_vendor == "1" and device["device_type"] == "fortinet":
                    print(f"{device['host']} selected")
                    getConfig(device, "show full-configuration")
                # Juniper Devices
                elif prompt_which_vendor == "2" and device["device_type"] == "juniper_junos":
                    print(f"{device['host']} selected")
                    getConfig(device, "show configuration | display set")
                elif prompt_which_vendor == "3" and device["device_type"] == "cisco.ios":
                    print(f"{device['host']} selected")
                    getConfig(device, "show running-configuration")
                else:
                    print("Error")
